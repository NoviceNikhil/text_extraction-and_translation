import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:file_picker/file_picker.dart';
import 'package:camera/camera.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as path;

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'OCR Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: OCRScreen(),
    );
  }
}

class OCRScreen extends StatefulWidget {
  @override
  _OCRScreenState createState() => _OCRScreenState();
}

class _OCRScreenState extends State<OCRScreen> {
  File _image;
  String _extractedText = '';
  String _translatedText = '';
  bool _isLoading = false;
  String _selectedLanguage = 'English';

  final List<String> _languages = [
    'English',
    'Spanish',
    'French',
    'German',
    'Chinese',
    'Japanese',
    'Korean',
    'Italian',
    'Dutch',
    'Portuguese',
    'Russian',
    'Arabic',
    'Hindi',
    'Bengali',
    'Urdu',
    'Persian',
    'Turkish',
    'Vietnamese',
    'Thai',
    'Polish',
    'Swedish',
    'Danish',
    'Norwegian',
    'Finnish',
    'Greek',
    'Czech',
    'Hungarian',
    'Romanian',
    'Bulgarian',
    'Kannada'
  ];

  Future<void> _pickImage() async {
    File file;
    try {
      file = await FilePicker.getFile(type: FileType.IMAGE);
    } catch (e) {
      print('File picking error: $e');
      return;
    }

    if (file != null) {
      setState(() {
        _image = file;
        _extractedText = '';
        _translatedText = '';
      });
    }
  }

  Future<void> _pickImageFromCamera() async {
    final cameras = await availableCameras();
    final firstCamera = cameras.first;
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => TakePictureScreen(camera: firstCamera),
      ),
    );

    if (result != null) {
      setState(() {
        _image = result;
        _extractedText = '';
        _translatedText = '';
      });
    }
  }

  Future<void> _extractText() async {
    if (_image == null) {
      print('No image selected.');
      return;
    }

    setState(() {
      _isLoading = true;
    });

    String apiUrl = 'http://192.168.1.31:5000/extract_text';
    var request = http.MultipartRequest('POST', Uri.parse(apiUrl));
    request.files.add(await http.MultipartFile.fromPath('image', _image.path));

    try {
      var streamedResponse = await request.send();
      var response = await http.Response.fromStream(streamedResponse);

      if (response.statusCode == 200) {
        print('Response received: ${response.body}');
        String extractedText = json.decode(response.body)['text'];
        print('Extracted Text: $extractedText');

        setState(() {
          _extractedText = extractedText;
        });
      } else {
        print('Failed to extract text. Error ${response.statusCode}');
      }
    } catch (e) {
      print('Error: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _translateText() async {
    if (_extractedText.isEmpty) {
      print('No text to translate.');
      return;
    }

    setState(() {
      _isLoading = true;
    });

    String apiUrl = 'http://192.168.1.31:8000/translate_text';
    String prompt = 'Translate the following text from existing language to $_selectedLanguage: "$_extractedText"';

    var headers = {
      'Content-Type': 'application/json',
    };

    var data = jsonEncode({
      'text': _extractedText,
      'target_language': _selectedLanguage,
    });

    try {
      var response = await http.post(Uri.parse(apiUrl), headers: headers, body: data);

      if (response.statusCode == 200) {
        print('Translation Response received: ${response.body}');
        String translatedText = json.decode(response.body)['translated_text'];
        print('Translated Text: $translatedText');

        setState(() {
          _translatedText = translatedText;
        });
      } else {
        print('Failed to translate text. Error ${response.statusCode}');
      }
    } catch (e) {
      print('Error: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('OCR Demo'),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: <Widget>[
            _isLoading
                ? CircularProgressIndicator()
                : _image == null
                ? Text('No image selected')
                : Image.file(_image, height: 300, width: 300, fit: BoxFit.contain),
            SizedBox(height: 20),
            Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                RaisedButton.icon(
                  onPressed: _pickImage,
                  icon: Icon(Icons.image),
                  label: Text('Select Image'),
                ),
                SizedBox(height: 20),
                RaisedButton.icon(
                  onPressed: _pickImageFromCamera,
                  icon: Icon(Icons.camera_alt),
                  label: Text('Take Picture'),
                ),
              ],
            ),
            SizedBox(height: 20),
            _image != null
                ? RaisedButton(
              onPressed: _extractText,
              color: Colors.blue,
              child: Text(
                'Extract Text',
                style: TextStyle(color: Colors.white),
              ),
            )
                : Container(),
            SizedBox(height: 20),
            _extractedText.isNotEmpty
                ? Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Text(
                  'Extracted Text:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                SizedBox(height: 10),
                Text(
                  _extractedText,
                  style: TextStyle(color: Colors.black),
                ),
                SizedBox(height: 20),
                DropdownButton<String>(
                  value: _selectedLanguage,
                  onChanged: (String newValue) {
                    setState(() {
                      _selectedLanguage = newValue;
                    });
                  },
                  items: _languages
                      .map<DropdownMenuItem<String>>(
                        (String value) => DropdownMenuItem<String>(
                      value: value,
                      child: Text(value),
                    ),
                  )
                      .toList(),
                ),
                SizedBox(height: 20),
                RaisedButton(
                  onPressed: _translateText,
                  color: Colors.green,
                  child: Text(
                    'Translate Text',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
                SizedBox(height: 20),
                _translatedText.isNotEmpty
                    ? Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    Text(
                      'Translated Text:',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    SizedBox(height: 10),
                    Text(
                      _translatedText,
                      style: TextStyle(color: Colors.black),
                    ),
                  ],
                )
                    : Container(),
              ],
            )
                : Container(),
          ],
        ),
      ),
    );
  }
}

class TakePictureScreen extends StatefulWidget {
  final CameraDescription camera;

  const TakePictureScreen({
    Key key,
    @required this.camera,
  }) : super(key: key);

  @override
  _TakePictureScreenState createState() => _TakePictureScreenState();
}


class _TakePictureScreenState extends State<TakePictureScreen> {
  CameraController _controller;
  Future<void> _initializeControllerFuture;

  @override
  void initState() {
    super.initState();
    _controller = CameraController(
      widget.camera,
      ResolutionPreset.medium,
    );
    _initializeControllerFuture = _controller.initialize();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Take a Picture')),
      body: FutureBuilder<void>(
        future: _initializeControllerFuture,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            return CameraPreview(_controller);
          } else {
            return Center(child: CircularProgressIndicator());
          }
        },
      ),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.camera_alt),
        onPressed: () async {
          try {
            await _initializeControllerFuture;
            final tempDir = await getTemporaryDirectory();
            final imagePath = path.join(
              tempDir.path,
              '${DateTime.now()}.png',
            );
            await _controller.takePicture(imagePath);
            Navigator.pop(context, File(imagePath));
          } catch (e) {
            print('Error taking picture: $e');
          }
        },
      ),
    );
  }
}
